// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          String   @id @default(cuid())
  email       String   @unique
  name        String
  password    String
  plan        Plan     @default(FREE)
  credits     Int      @default(200)
  planExpiry  DateTime?
  isAdmin     Boolean  @default(false)
  lastLogin   DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  sessions    Session[]
  contents    Content[]
  transactions Transaction[]
  apiKeys     ApiKey[]

  @@map("users")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model Content {
  id          String        @id @default(cuid())
  title       String
  description String?
  type        ContentType
  platforms   Platform[]
  content     Json
  status      ContentStatus @default(PENDING)
  creditsUsed Int
  userId      String
  user        User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  @@map("contents")
}

model Transaction {
  id          String           @id @default(cuid())
  type        TransactionType
  amount      Int
  credits     Int
  description String
  status      PaymentStatus    @default(PENDING)
  orderId     String?          @unique
  userId      String
  user        User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt

  @@map("transactions")
}

model ApiKey {
  id        String   @id @default(cuid())
  name      String
  key       String   @unique
  isActive  Boolean  @default(true)
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("api_keys")
}

model SystemConfig {
  id        String   @id @default(cuid())
  key       String   @unique
  value     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("system_configs")
}

model Analytics {
  id        String   @id @default(cuid())
  event     String
  data      Json?
  userId    String?
  createdAt DateTime @default(now())

  @@map("analytics")
}

enum Plan {
  FREE
  PRO
  PREMIUM
  VIP
}

enum ContentType {
  PERSONAL
  PRODUCT
}

enum ContentStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
}

enum TransactionType {
  PURCHASE
  DEDUCTION
  BONUS
  REFUND
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  CANCELLED
}

enum Platform {
  INSTAGRAM
  FACEBOOK
  TWITTER
  TIKTOK
  YOUTUBE
  LINKEDIN
  PINTEREST
  SNAPCHAT
  TWITCH
  DISCORD
  TELEGRAM
}
